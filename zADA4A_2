import numpy as np
from dimod import BinaryQuadraticModel
from dwave.system import DWaveSampler, EmbeddingComposite
import os
import pandas as pd

# API_TOKEN = ...
os.environ['DWAVE_API_TOKEN'] = API_TOKEN

file_name1 = 'task-2-adjacency_matrix.csv'
file_name2 = 'task-2-nodes.csv'
cost_matrix = pd.read_csv(file_name1)
NODES = list(cost_matrix.head())[1::]
cost_matrix = [
    [float(el.replace('-', 'inf')) for el in row[1::]]
    for row in cost_matrix.values
]

num_buses = 15
num_points = 38 + 19
max_capacity = 10
time_limit = 15
groups = [2, 3, 5, 9]
group_sizes = pd.read_csv(file_name2)
group_sizes = [
    row[1] for row in np.array(group_sizes.values)
]
print(group_sizes)

Q = {}
for i in range(num_buses):
    for j in range(num_points):
        for k in range(num_points):
            if j != k:
                Q[(i, j, k)] = cost_matrix[j][k]

penalty_visits = 10
for j in range(38):
    for i in range(num_buses):
        for k in range(num_points):
            Q[(i, j, k)] += penalty_visits

penalty_capacity = 10
for i in range(num_buses):
    for j in range(38):
        if group_sizes[j] > max_capacity:
            for k in range(num_points):
                Q[(i, j, k)] += penalty_capacity

penalty_time = 10
for i in range(num_buses):
    for j in range(num_points):
        for k in range(num_points):
            if cost_matrix[j, k] > time_limit:
                Q[(i, j, k)] += penalty_time

bqm = BinaryQuadraticModel.from_qubo(Q)

sampler = EmbeddingComposite(DWaveSampler())
solution = sampler.sample(bqm, num_reads=10)

for sample, energy in solution.data(['sample', 'energy']):
    print(f'Решение: {sample}, Затраты: {energy}')
    break
